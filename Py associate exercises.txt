2. Estimated time30 minutesLevel of difficultyMediumObjectives• improving the student's skills in operating with strings;• using strings to represent non-text data.ScenarioYou've surely seen a seven-segment display.It's a device (sometimes electronic, sometimes mechanical) designed to present one decimal digit using a subset of seven segments. If you still don't know what it is, refer to the following Wikipedia article.Your task is to write a program which is able to simulate the work of a seven-display device, although you're going to use single LEDs instead of segments.Each digit is constructed from 13 LEDs (some lit, some dark, of course) - that's how we imagine it:  # ### ### # # ### ### ### ### ### ###   #   #   # # # #   #     # # # # # # #   # ### ### ### ### ###   # ### ### # #   # #     #   #   # # #   # # #   # # #   # ### ###   # ### ###   # ### ### ###Note: the number 8 shows all the LED lights on.Your code has to display any non-negative integer number entered by the user.Tip: using a list containing patterns of all ten digits may be very helpful.Test dataSample input:123Sample output:  # ### ###   #   #   #   # ### ###   # #     #   # ### ### Sample input:9081726354Sample output:### ### ###   # ### ### ### ### ### # # # # # # # #   #   #   # #     # #   # # ### # # ###   #   # ### ### ### ### ###   # # # # #   #   # #   # #   #   #   # ### ### ###   #   # ### ### ### ###   # 3. Estimated time30-90 minutesLevel of difficultyHardPre-requisitesModule 1.11.1.1, Module 1.11.1.2Objectives• improving the student's skills in operating with strings;• converting characters into ASCII code, and vice versa.ScenarioYou are already familiar with the Caesar cipher, and this is why we want you to improve the code we showed you recently.The original Caesar cipher shifts each character by one: a becomes b, z becomes a, and so on. Let's make it a bit harder, and allow the shifted value to come from the range 1..25 inclusive.Moreover, let the code preserve the letters' case (lower-case letters will remain lower-case) and all non-alphabetical characters should remain untouched.Your task is to write a program which:• asks the user for one line of text to encrypt;• asks the user for a shift value (an integer number from the range 1..25 - note: you should force the user to enter a valid shift value (don't give up and don't let bad data fool you!)• prints out the encoded text.Test your code using the data we've provided.Test dataSample input:abcxyzABCxyz 1232Sample output:cdezabCDEzab 123Sample input:The die is cast25Sample output:Sgd chd hr bzrs4. Estimated time15-30 minutesLevel of difficultyEasyObjectives• improving the student's skills in operating with strings;• encouraging the student to look for non-obvious solutions.ScenarioDo you know what a palindrome is?It's a word which look the same when read forward and backward. For example, "kayak" is a palindrome, while "loyal" is not.Your task is to write a program which:• asks the user for some text;• checks whether the entered text is a palindrome, and prints result.Note:• assume that an empty string isn't a palindrome;• treat upper- and lower-case letters as equal;• spaces are not taken into account during the check - treat them as non-existent;• there are more than a few correct solutions - try to find more than one.Test your code using the data we've provided.Test dataSample input:Ten animals I slam in a netSample output:It's a palindromeSample input:Eleven animals I slam in a netSample output:It's not a palindrome5. Estimated time30-60 minutesLevel of difficultyEasyObjectives• improving the student's skills in operating with strings;• converting strings into lists, and vice versa.ScenarioAn anagram is a new word formed by rearranging the letters of a word, using all the original letters exactly once. For example, the phrases "rail safety" and "fairy tales" are anagrams, while "I am" and "You are" are not.Your task is to write a program which:• asks the user for two separate texts;• checks whether, the entered texts are anagrams and prints the result.Note:• assume that two empty strings are not anagrams;• treat upper- and lower-case letters as equal;• spaces are not taken into account during the check - treat them as non-existentTest your code using the data we've provided.Test dataSample input:ListenSilentSample output:AnagramsSample input:modernnormanSample output:Not anagrams6. Estimated time15-30 minutesLevel of difficultyEasyObjectives• improving the student's skills in operating with strings;• converting integers into strings, and vice versa.ScenarioSome say that the Digit of Life is a digit evaluated using somebody's birthday. It's simple - you just need to sum all the digits of the date. If the result contains more than one digit, you have to repeat the addition until you get exactly one digit. For example:• 1 January 2017 = 2017 01 01• 2 + 0 + 1 + 7 + 0 + 1 + 0 + 1 = 12• 1 + 2 = 33 is the digit we searched for and found.Your task is to write a program which:• asks the user her/his birthday (in the format YYYYMMDD, or YYYYDDMM, or MMDDYYYY - actually, the order of the digits doesn't matter)• outputs the Digit of Life for the date.Test your code using the data we've provided.Test dataSample input:19991229Sample output:6Sample input:20000101Sample output:47. Estimated time30-45 minutesLevel of difficultyMediumObjectives• improving the student's skills in operating with strings;• using the find() method for searching strings.ScenarioLet's play a game. We will give you two strings: one being a word (e.g., "dog") and the second being a combination of any characters.Your task is to write a program which answers the following question: are the characters comprising the first string hidden inside the second string?For example:• if the second string is given as "vcxzxduybfdsobywuefgas", the answer is yes;• if the second string is "vcxzxdcybfdstbywuefsas", the answer is no (as there are neither the letters "d", "o", or "g", in this order)Hints:• you should use the two-argument variants of the pos() functions inside your code;• don't worry about case sensitivity.Test your code using the data we've provided.Test dataSample input:donorNabucodonosorSample output:YesSample input:donutNabucodonosorSample output:No8. Estimated time60-90 minutesLevel of difficultyHardObjectives• improving the student's skills in operating with strings and lists;• converting strings into lists.ScenarioAs you probably know, Sudoku is a number-placing puzzle played on a 9x9 board. The player has to fill the board in a very specific way:• each row of the board must contain all digits from 0 to 9 (the order doesn't matter)• each column of the board must contain all digits from 0 to 9 (again, the order doesn't matter)• each of the nine 3x3 "tiles" (we will name them "sub-squares") of the table must contain all digits from 0 to 9.If you need more details, you can find them here.Your task is to write a program which:• reads 9 rows of the Sudoku, each containing 9 digits (check carefully if the data entered are valid)• outputs Yes if the Sudoku is valid, and No otherwise.Test your code using the data we've provided.Test dataSample input:295743861431865927876192543387459216612387495549216738763524189928671354154938672Sample output:YesSample input:195743862431865927876192543387459216612387495549216738763524189928671354254938671Sample output:No10. Estimated time20-45 minutesLevel of difficultyEasy/MediumObjectives• improve the student's skills in defining classes;• using existing classes to create new classes equipped with new functionalities.ScenarioWe've showed you recently how to extend Stack possibilities by defining a new class (i.e., a subclass) which retains all inherited traits and adds some new ones.Your task is to extend the Stack class behavior in such a way so that the class is able to count all the elements that are pushed and popped (we assume that counting pops is enough). Use the Stack class we've provided in the editor.Follow the hints:• introduce a property designed to count pop operations and name it in a way which guarantees hiding it;• initialize it to zero inside the constructor;• provide a method which returns the value currently assigned to the counter (name it get_counter()).Complete the code in the editor. Run it to check whether your code outputs 100.13. Estimated time30-60 minutesLevel of difficultyEasy/MediumObjectives• improving the student's skills in defining classes from scratch;• defining and using instance variables;• defining and using methods.ScenarioWe need a class able to count seconds. Easy? Not as much as you may think as we're going to have some specific expectations.Read them carefully as the class you're about write will be used to launch rockets carrying international missions to Mars. It's a great responsibility. We're counting on you!Your class will be called Timer. Its constructor accepts three arguments representing hours (a value from range [0..23] - we will be using the military time), minutes (from range [0..59]) and seconds (from range [0..59]).Zero is the default value for all of the above parameters. There is no need to perform any validation checks.The class itself should provide the following facilities:• objects of the class should be "printable", i.e. they should be able to implicitly convert themselves into strings of the following form: "hh:mm:ss", with leading zeros added when any of the values is less than 10;• the class should be equipped with parameterless methods called next_second() and previous_second(), incrementing the time stored inside objects by +1/-1 second respectively.Use the following hints:• all object's properties should be private;• consider writing a separate function (not method!) to format the time string.Complete the template we've provided in the editor. Run your code and check whether the output looks the same as ours.Expected output23:59:5900:00:0023:59:5914. Estimated time30-60 minutesLevel of difficultyEasy/MediumObjectives• improving the student's skills in defining classes from scratch;• defining and using instance variables;• defining and using methods.ScenarioYour task is to implement a class called Weeker. Yes, your eyes don't deceive you – this name comes from the fact that objects of that class will be able to store and to manipulate the days of the week.The class constructor accepts one argument – a string. The string represents the name of the day of the week and the only acceptable values must come from the following set:Mon Tue Wed Thu Fri Sat SunInvoking the constructor with an argument from outside this set should raise the WeekDayError exception (define it yourself; don't worry, we'll talk about the objective nature of exceptions soon). The class should provide the following facilities:• objects of the class should be "printable", i.e. they should be able to implicitly convert themselves into strings of the same form as the constructor arguments;• the class should be equipped with one-parameter methods called add_days(n) and subtract_days(n), with n being an integer number and updating the day of week stored inside the object in the way reflecting the change of date by the indicated number of days, forward or backward.• all object's properties should be private;Complete the template we've provided in the editor and run your code and check whether your output looks the same as ours.Expected outputMonTueSunSorry, I can't serve your request.15. Estimated time30-60 minutesLevel of difficultyEasy/MediumObjectives• improving the student's skills in defining classes from scratch;• defining and using instance variables;• defining and using methods.ScenarioLet's visit a very special place - a plane with the Cartesian coordinate system (you can learn more about this concept here: https://en.wikipedia.org/wiki/Cartesian_coordinate_system).Each point located on the plane can be described as a pair of coordinates customarily called x and y. We expect that you are able to write a Python class which stores both coordinates as float numbers. Moreover, we want the objects of this class to evaluate the distances between any of the two points situated on the plane.The task is rather easy if you employ the function named hypot() (available through the math module) which evaluates the length of the hypotenuse of a right triangle (more details here: https://en.wikipedia.org/wiki/Hypotenuse) and here: https://docs.python.org/3.7/library/math.html#trigonometric-functions.This is how we imagine the class:• it's called Point;• its constructor accepts two arguments (x and y respectively), both default to zero;• all the properties should be private;• the class contains two parameterless methods called getx() and gety(), which return each of the two coordinates (the coordinates are stored privately, so they cannot be accessed directly from within the object);• the class provides a method called distance_from_xy(x,y), which calculates and returns the distance between the point stored inside the object and the other point given as a pair of floats;• the class provides a method called distance_from_point(point), which calculates the distance (like the previous method), but the other point's location is given as another Point class object;Complete the template we've provided in the editor and run your code and check whether your output looks the same as ours.Expected output1.41421356237309511.414213562373095116. Estimated time30-60 minutesLevel of difficultyMediumObjectives• improving the student's skills in defining classes from scratch;• using composition.ScenarioNow we're going to embed the Point class (see Lab 3.4.1.14) inside another class. Also, we're going to put three points into one class, which will let us define a triangle. How can we do it?The new class will be called Triangle and this is the list of our expectations:• the constructor accepts three arguments - all of them are objects of the Point class;• the points are stored inside the object as a private list;• the class provides a parameterless method called perimeter(), which calculates the perimeter of the triangle described by the three points; the perimeter is a sum of all legs' lengths (we mention it for the record, although we are sure that you know it perfectly yourself.)Complete the template we've provided in the editor. Run your code and check whether the evaluated perimeter is the same as ours.Below you can copy the Point class code we used in the previous lab:CheckExpected output3.41421356237309520. Estimated time15-30 minLevel of difficultyEasyObjectives• improving the student's skills in interacting with the operating system;• practical use of known functions provided by the os module.ScenarioIt goes without saying that operating systems allow you to search for files and directories. While studying this part of the course, you learned about the functions of the os module, which have everything you need to write a program that will search for directories in a given location.To make your task easier, we have prepared a test directory structure for you:Your program should meet the following requirements:1. Write a function or method called find that takes two arguments called path and dir. The path argument should accept a relative or absolute path to a directory where the search should start, while the dir argument should be the name of a directory that you want to find in the given path. Your program should display the absolute paths if it finds a directory with the given name.2. The directory search should be done recursively. This means that the search should also include all subdirectories in the given path.Example input:path="./tree", dir="python"Example output:.../tree/python.../tree/cpp/other_courses/python.../tree/c/other_courses/python22. Estimated time30-60 minutesLevel of difficultyEasyObjectives• Improving the student's skills in using the Calendar class.ScenarioDuring this course, we looked at the Calendar class a bit. Your task is to extend its functionality with a new method called count_weekday_in_year, which takes a year and a weekday as parameters, and then returns the number of occurrences of a specific weekday in the year.Use the following tips:• Create a class called MyCalendar that extends the Calendar class;• create the count_weekday_in_year method with the year and weekday parameters. The weekday parameter should be a value between 0-6, where 0 is Monday and 6 is Sunday. The method should return the number of days as an integer;• in your implementation, use the monthdays2calendar method of the Calendar class.The following are the expected results:Sample argumentsyear=2019, weekday=0Expected output52Sample argumentsyear=2000, weekday=6Expected output53